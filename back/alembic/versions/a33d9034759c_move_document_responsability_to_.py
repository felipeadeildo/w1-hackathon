"""move document responsability to onboarding step

Revision ID: a33d9034759c
Revises: 7b0154d6fea5
Create Date: 2025-05-22 10:48:10.368867

"""

from collections.abc import Sequence

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "a33d9034759c"
down_revision: str | None = "7b0154d6fea5"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop foreign key constraints first
    op.drop_constraint(
        "familymember_identified_in_chat_id_fkey", "familymember", type_="foreignkey"
    )
    op.drop_constraint(
        "documentrequirement_generated_from_chat_id_fkey", "documentrequirement", type_="foreignkey"
    )
    op.drop_constraint(
        "documentrequirement_stage_id_fkey", "documentrequirement", type_="foreignkey"
    )
    op.drop_constraint(
        "documentrequirement_holding_id_fkey", "documentrequirement", type_="foreignkey"
    )
    op.drop_constraint("document_holding_id_fkey", "document", type_="foreignkey")

    # Drop all tables in correct order
    op.drop_table("chatdocumentgeneration")
    op.drop_table("chatmessage")
    op.drop_table("holdingasset")
    op.drop_table("taxsavingdetail")  # Drop this before asset since it depends on it
    op.drop_table("asset")
    op.drop_table("holdingactivity")
    op.drop_table(
        "chatsession"
    )  # Drop this before holdingstage since holdingstage is referenced by it
    op.drop_table("holdingstage")
    op.drop_table("simulationresult")
    op.drop_index("ix_holding_status", table_name="holding")
    op.drop_table("holding")

    # Add new columns and constraints
    op.add_column("document", sa.Column("user_step_id", sa.Integer(), nullable=False))
    op.create_foreign_key(
        "document_user_step_id_fkey", "document", "useronboardingstep", ["user_step_id"], ["id"]
    )
    op.drop_column("document", "holding_id")
    op.add_column("documentrequirement", sa.Column("step_id", sa.Integer(), nullable=False))
    op.create_foreign_key(
        "documentrequirement_step_id_fkey",
        "documentrequirement",
        "onboardingstep",
        ["step_id"],
        ["id"],
    )
    op.drop_column("documentrequirement", "holding_id")
    op.drop_column("documentrequirement", "stage_id")
    op.drop_column("documentrequirement", "generated_from_chat_id")
    op.drop_column("familymember", "identified_in_chat_id")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "familymember",
        sa.Column("identified_in_chat_id", sa.UUID(), autoincrement=False, nullable=True),
    )
    op.create_foreign_key(
        "familymember_identified_in_chat_id_fkey",
        "familymember",
        "chatsession",
        ["identified_in_chat_id"],
        ["id"],
    )
    op.add_column(
        "documentrequirement",
        sa.Column("generated_from_chat_id", sa.UUID(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "documentrequirement", sa.Column("stage_id", sa.UUID(), autoincrement=False, nullable=True)
    )
    op.add_column(
        "documentrequirement",
        sa.Column("holding_id", sa.UUID(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(
        "documentrequirement_step_id_fkey", "documentrequirement", type_="foreignkey"
    )
    op.create_foreign_key(
        "documentrequirement_holding_id_fkey",
        "documentrequirement",
        "holding",
        ["holding_id"],
        ["id"],
    )
    op.create_foreign_key(
        "documentrequirement_generated_from_chat_id_fkey",
        "documentrequirement",
        "chatdocumentgeneration",
        ["generated_from_chat_id"],
        ["id"],
    )
    op.create_foreign_key(
        "documentrequirement_stage_id_fkey",
        "documentrequirement",
        "holdingstage",
        ["stage_id"],
        ["id"],
    )
    op.drop_column("documentrequirement", "step_id")
    op.add_column(
        "document", sa.Column("holding_id", sa.UUID(), autoincrement=False, nullable=False)
    )
    op.drop_constraint("document_user_step_id_fkey", "document", type_="foreignkey")
    op.create_foreign_key("document_holding_id_fkey", "document", "holding", ["holding_id"], ["id"])
    op.drop_column("document", "user_step_id")
    op.create_table(
        "taxsavingdetail",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("simulation_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("saving_type", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("amount", sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
        sa.Column("recurrence", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("applies_to_asset_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("applies_to_family_member_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["applies_to_asset_id"], ["asset.id"], name="taxsavingdetail_applies_to_asset_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["applies_to_family_member_id"],
            ["familymember.id"],
            name="taxsavingdetail_applies_to_family_member_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["simulation_id"], ["simulationresult.id"], name="taxsavingdetail_simulation_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="taxsavingdetail_pkey"),
    )
    op.create_table(
        "holding",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("status", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "estimated_completion_date", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "estimated_total_assets_value",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "estimated_annual_income",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("client_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("consultant_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("cnpj", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("legal_name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("incorporation_date", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(["client_id"], ["user.id"], name="holding_client_id_fkey"),
        sa.ForeignKeyConstraint(["consultant_id"], ["user.id"], name="holding_consultant_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="holding_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_holding_status", "holding", ["status"], unique=False)
    op.create_table(
        "chatsession",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("stage_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("status", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("total_messages", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("client_satisfaction", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["stage_id"], ["holdingstage.id"], name="chatsession_stage_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="chatsession_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "simulationresult",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("holding_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("created_by_user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "tax_savings_annual",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "succession_savings_total",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "total_savings_5y",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "roi_percentage", sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False
        ),
        sa.Column("assumptions", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("simulation_period_years", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by_user_id"], ["user.id"], name="simulationresult_created_by_user_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["holding_id"], ["holding.id"], name="simulationresult_holding_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="simulationresult_pkey"),
    )
    op.create_table(
        "holdingstage",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("holding_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("order", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("status", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("stage_type", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("start_date", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("end_date", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["holding_id"], ["holding.id"], name="holdingstage_holding_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="holdingstage_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "holdingactivity",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("holding_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("activity_type", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("performed_by_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("performed_by_type", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("related_stage_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("related_document_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("related_chat_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("time_spent_seconds", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["holding_id"], ["holding.id"], name="holdingactivity_holding_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["performed_by_id"], ["user.id"], name="holdingactivity_performed_by_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["related_chat_id"], ["chatsession.id"], name="holdingactivity_related_chat_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["related_document_id"],
            ["document.id"],
            name="holdingactivity_related_document_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["related_stage_id"], ["holdingstage.id"], name="holdingactivity_related_stage_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="holdingactivity_pkey"),
    )
    op.create_table(
        "chatdocumentgeneration",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("chat_session_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("message_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("holding_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("target_stage_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["chat_session_id"],
            ["chatsession.id"],
            name="chatdocumentgeneration_chat_session_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["holding_id"], ["holding.id"], name="chatdocumentgeneration_holding_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["message_id"], ["chatmessage.id"], name="chatdocumentgeneration_message_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["target_stage_id"],
            ["holdingstage.id"],
            name="chatdocumentgeneration_target_stage_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="chatdocumentgeneration_pkey"),
    )
    op.create_table(
        "holdingasset",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("holding_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("asset_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("integration_status", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("integration_date", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column(
            "integration_value",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "tax_paid", sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True
        ),
        sa.Column(
            "annual_tax_before",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "annual_tax_after",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(["asset_id"], ["asset.id"], name="holdingasset_asset_id_fkey"),
        sa.ForeignKeyConstraint(
            ["holding_id"], ["holding.id"], name="holdingasset_holding_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="holdingasset_pkey"),
    )
    op.create_table(
        "asset",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("owner_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("asset_type", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "market_value", sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False
        ),
        sa.Column("acquisition_date", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column(
            "acquisition_value",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("identified_by", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("identified_in_chat_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("real_estate_registry", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("real_estate_address", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "real_estate_area",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("real_estate_tax_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("company_name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("company_cnpj", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "company_participation_percentage",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("investment_type", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("investment_institution", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("vehicle_make", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("vehicle_model", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("vehicle_year", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("vehicle_license_plate", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["identified_in_chat_id"], ["chatsession.id"], name="asset_identified_in_chat_id_fkey"
        ),
        sa.ForeignKeyConstraint(["owner_id"], ["user.id"], name="asset_owner_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="asset_pkey"),
    )
    op.create_table(
        "chatmessage",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("session_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("sender", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("content", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("token_count", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("processed_duration_ms", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["session_id"], ["chatsession.id"], name="chatmessage_session_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="chatmessage_pkey"),
    )
    # ### end Alembic commands ###
